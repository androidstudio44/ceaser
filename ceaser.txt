import argparse

def encrypt(message, key):
    """Encrypts the message using the provided key"""
    encrypted_message = ""
    for char in message:
        encrypted_char = chr(ord(char) + key)
        encrypted_message += encrypted_char
    return encrypted_message

def decrypt(encrypted_message, key):
    """Decrypts the encrypted message using the provided key"""
    decrypted_message = ""
    for char in encrypted_message:
        decrypted_char = chr(ord(char) - key)
        decrypted_message += decrypted_char
    return decrypted_message

# Parse command line arguments
parser = argparse.ArgumentParser()
parser.add_argument("message", help="message to encrypt or decrypt")
parser.add_argument("key", type=int, help="encryption/decryption key")
parser.add_argument("-e", "--encrypt", action="store_true", help="encrypt the message")
parser.add_argument("-d", "--decrypt", action="store_true", help="decrypt the message")
args = parser.parse_args()

if args.encrypt:
    encrypted_message = encrypt(args.message, args.key)
    print("Encrypted message:", encrypted_message)
elif args.decrypt:
    decrypted_message = decrypt(args.message, args.key)
    print("Decrypted message:", decrypted_message)
else:
    print("Please specify whether to encrypt or decrypt the message using the -e or -d flag")




Этот код на Python демонстрирует использование модуля argparse для парсинга аргументов командной строки. Модуль argparse используется для создания пользовательских интерфейсов командной строки и автоматического разбора аргументов командной строки.

В данном конкретном примере создается парсер с помощью класса ArgumentParser(). Далее, определяются аргументы командной строки, которые могут быть переданы программе.

Первые два аргумента ("message" и "key") являются позиционными аргументами и должны быть переданы программе в указанном порядке. Первый аргумент "message" представляет собой сообщение для шифрования или дешифрования, а второй аргумент "key" - ключ для шифрования или дешифрования.

Затем определяются флаги, которые позволяют указать, нужно ли шифровать или дешифровать сообщение. Флаг "-e" или "--encrypt" используется для шифрования сообщения, а флаг "-d" или "--decrypt" - для дешифрования.

После того, как все аргументы определены, парсер аргументов командной строки вызывается методом parse_args(). Этот метод разбирает переданные аргументы командной строки и возвращает объект с атрибутами, соответствующими определенным аргументам.

Далее, в зависимости от того, какой флаг был указан, либо вызывается функция encrypt(), чтобы зашифровать сообщение, либо функция decrypt() - чтобы расшифровать его. Результат выводится на экран.

В функциях encrypt() и decrypt() используется простой алгоритм шифрования: каждый символ в сообщении заменяется на символ, который находится на некотором фиксированном расстоянии (key) по таблице символов ASCII.

Использование модуля argparse упрощает взаимодействие с программой из командной строки, а использование функций encrypt() и decrypt() демонстрирует простой пример алгоритма шифрования и дешифрования, который может быть улучшен для более серьезных приложений.
